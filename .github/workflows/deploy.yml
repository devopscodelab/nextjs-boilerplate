name: Deploy to Amazon ECS (Blue/Green)

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: pflegia-app
  ECS_CLUSTER: pflegia-cluster
  ECS_SERVICE: pflegia-service
  TASK_DEFINITION_FAMILY: pflegia-task
  CONTAINER_NAME: pflegia-container
  ALB_LISTENER_ARN: arn:aws:elasticloadbalancing:us-east-1:534249315747:listener/app/pflegia-alb/32ac1abd20d12092/c816a24d292e4d8a
  TG_BLUE: arn:aws:elasticloadbalancing:us-east-1:534249315747:targetgroup/pflegia-blue-tg/cf5abdf320fc857c
  TG_GREEN: arn:aws:elasticloadbalancing:us-east-1:534249315747:targetgroup/pflegia-green-tg/625520c39bfde7f8


permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: self-hosted
    environment: production

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, Tag, and Push Docker Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

        # Tag the image as "latest" so ECS can pull it
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

        # Push both the versioned and latest tags to Amazon ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

        # Save image references
        echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
        echo "IMAGE_URI_LATEST=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_ENV

    - name: Register New Task Definition
      id: register-task
      run: |
        NEW_TASK_DEF=$(aws ecs register-task-definition \
          --family $TASK_DEFINITION_FAMILY \
          --execution-role-arn arn:aws:iam::534249315747:role/pflegia-ecs-execution-role \
          --network-mode awsvpc \
          --requires-compatibilities FARGATE \
          --cpu 256 \
          --memory 512 \
          --container-definitions "[{
            \"name\": \"${CONTAINER_NAME}\",
            \"image\": \"${IMAGE_URI_LATEST}\",
            \"cpu\": 256,
            \"memory\": 512,
            \"essential\": true,
            \"portMappings\": [{
              \"containerPort\": 3000,
              \"protocol\": \"tcp\"
            }],
            \"healthCheck\": {
              \"command\": [\"CMD-SHELL\", \"curl -f http://localhost:3000/ || exit 1\"],
              \"interval\": 60,
              \"timeout\": 30,
              \"retries\": 5,
              \"startPeriod\": 120
            }
          }]" \
          --region $AWS_REGION)

        TASK_REVISION=$(echo "$NEW_TASK_DEF" | jq -r '.taskDefinition.taskDefinitionArn')
        echo "TASK_REVISION=$TASK_REVISION" >> $GITHUB_ENV

    - name: Deploy Updated Task Definition to ECS
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $TASK_REVISION --force-new-deployment --region $AWS_REGION

    - name: Switch ALB Listener to New Target Group
      run: |
        # Get the currently active target group
        ACTIVE_TG=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query "services[0].loadBalancers[0].targetGroupArn" \
          --output text)

        # Determine the next target group to use
        if [[ "$ACTIVE_TG" == "$TG_BLUE" ]]; then
          NEW_TG="$TG_GREEN"
        else
          NEW_TG="$TG_BLUE"
        fi

        echo "Switching traffic to: $NEW_TG"

        # Update ALB listener rule to forward traffic to the new target group
        aws elbv2 modify-listener \
          --listener-arn $ALB_LISTENER_ARN \
          --default-actions '[{"Type":"forward","ForwardConfig":{"TargetGroups":[{"TargetGroupArn":"'"$NEW_TG"'","Weight":1}]}}]' \
          --region $AWS_REGION

        echo "Traffic switched successfully!"
